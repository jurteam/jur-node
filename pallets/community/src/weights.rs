
//! Autogenerated weights for pallet_community
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Pankajs-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/jur-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet-community
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/community/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_community.
pub trait WeightInfo {
	fn create_community() -> Weight;
	fn update_community() -> Weight;
	fn update_metadata() -> Weight;
	fn accept_members() -> Weight;
	fn join_community() -> Weight;
	fn leave_community() -> Weight;
	fn remove_member() -> Weight;
	fn update_passport_metadata() -> Weight;
}

/// Weights for pallet_community using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Community::NextCommunityId` (r:1 w:1)
	/// Proof: `Community::NextCommunityId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Whitelist::Founders` (r:1 w:0)
	/// Proof: `Whitelist::Founders` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Community::Nonce` (r:1 w:1)
	/// Proof: `Community::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Community::CommunityAccount` (r:1 w:1)
	/// Proof: `Community::CommunityAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `4079`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_000_000, 4079)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 4229)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn accept_members() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn join_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn leave_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_passport_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 4229)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Community::NextCommunityId` (r:1 w:1)
	/// Proof: `Community::NextCommunityId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Whitelist::Founders` (r:1 w:0)
	/// Proof: `Whitelist::Founders` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Community::Nonce` (r:1 w:1)
	/// Proof: `Community::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `Community::CommunityAccount` (r:1 w:1)
	/// Proof: `Community::CommunityAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `4079`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_000_000, 4079)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 4229)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn accept_members() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn join_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn leave_community() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4229)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:1)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_passport_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `764`
		//  Estimated: `4229`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 4229)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}