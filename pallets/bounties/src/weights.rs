
//! Autogenerated weights for pallet_bounties
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Pankajs-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/jur-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet-bounties
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/bounties/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bounties.
pub trait WeightInfo {
	fn create_bounty() -> Weight;
	fn update_bounty() -> Weight;
	fn complete_bounty() -> Weight;
}

/// Weights for pallet_bounties using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Community::Communities` (r:1 w:0)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Passport::Badges` (r:1 w:0)
	/// Proof: `Passport::Badges` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::NextBountyId` (r:1 w:1)
	/// Proof: `Bounties::NextBountyId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::BountyExpireTime` (r:0 w:1)
	/// Proof: `Bounties::BountyExpireTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::Bounties` (r:0 w:1)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_bounty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1168`
		//  Estimated: `4633`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4633)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:0)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Passport::Passports` (r:2 w:0)
	/// Proof: `Passport::Passports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::Bounties` (r:1 w:1)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_bounty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1422`
		//  Estimated: `7362`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(32_000_000, 7362)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:0)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Passport::Passports` (r:2 w:2)
	/// Proof: `Passport::Passports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::Bounties` (r:1 w:1)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn complete_bounty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1486`
		//  Estimated: `7426`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 7426)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Community::Communities` (r:1 w:0)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Passport::Badges` (r:1 w:0)
	/// Proof: `Passport::Badges` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::NextBountyId` (r:1 w:1)
	/// Proof: `Bounties::NextBountyId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::BountyExpireTime` (r:0 w:1)
	/// Proof: `Bounties::BountyExpireTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::Bounties` (r:0 w:1)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_bounty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1168`
		//  Estimated: `4633`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4633)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:0)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Passport::Passports` (r:2 w:0)
	/// Proof: `Passport::Passports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::Bounties` (r:1 w:1)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_bounty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1422`
		//  Estimated: `7362`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(32_000_000, 7362)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Community::Communities` (r:1 w:0)
	/// Proof: `Community::Communities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Passport::Passports` (r:2 w:2)
	/// Proof: `Passport::Passports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bounties::Bounties` (r:1 w:1)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn complete_bounty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1486`
		//  Estimated: `7426`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 7426)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}